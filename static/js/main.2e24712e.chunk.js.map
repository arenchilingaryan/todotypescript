{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","useState","title","setTitle","value","onChange","event","target","onKeyPress","key","onAdd","type","id","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","onClick","bind","checked","stopPropagation","removeHandler","TodosPage","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodo","Date","now","prev","window","confirm","filter","AboutPage","App","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e24712e.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport const Navbar: React.FunctionComponent = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper purple darken-4 px1\">\n                <a href=\"/\" className=\"brand-logo\">Todo List</a>\n                <ul className=\"right hide-on-med-and-down\">\n                    <li><NavLink to=\"/todotypescript\">Список дел</NavLink></li>\n                    <li><NavLink to=\"/about\">О нас</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","import React, { useState } from 'react'\n\ninterface TodoFormProps {\n    onAdd(title: string): void\n}\n\nexport const TodoForm: React.FunctionComponent<TodoFormProps> = (props) => {\n\n    const [title, setTitle] = useState<string>('')\n\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.target.value)\n    }\n    const keyPressHandler = (event: React.KeyboardEvent) => {\n        if (event.key === 'Enter') {\n            props.onAdd(title)\n            setTitle('')\n        }\n    }\n\n    return (\n        <div className=\"input-field mt2\" >\n            <input\n                value={title}\n                onChange={changeHandler}\n                onKeyPress={keyPressHandler}\n                type=\"text\"\n                id=\"title\"\n                placeholder=\"Введите название\" />\n            <label htmlFor=\"title\"></label>\n        </div>\n    )\n}","import React from 'react'\nimport { ITodo } from '../interfaces';\n\ntype TodoListProps = {\n    todos: ITodo[]\n    onToggle: (id: number) => void\n    onRemove: (id: number) => void\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, onRemove, onToggle }) => {\n\n    if (todos.length === 0) {\n        return <p className=\"center\">Пока дел нет</p>\n    }\n\n    const removeHandler = (event: React.MouseEvent, id: number) => {\n        event.stopPropagation()\n        onRemove(id)\n    }\n\n    return (\n        <ul>\n            {todos.map(todo => {\n                const classes = ['todo']\n                if (todo.completed) {\n                    classes.push('completed')\n                }\n                return (\n                    <li key={todo.id} className={classes.join(' ')} >\n                        <label htmlFor=\"\" onClick={onToggle.bind(null, todo.id)}>\n                            <input type=\"checkbox\"\n                                checked={todo.completed}\n                            />\n                            <span> {todo.title} </span>\n                            <i\n                                className=\"material-icons red-text\"\n                                onClick={event => removeHandler(event, todo.id)} \n                            >delete</i>\n                        </label>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { ITodo } from '../interfaces';\n\nexport const TodosPage: React.FC = () => {\n    const [todos, setTodos] = useState<ITodo[]>([])\n\n    useEffect(() => {\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\n        setTodos(saved)\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }, [todos])\n\n    const addHandler = (title: string) => {\n        const newTodo: ITodo = {\n            title,\n            id: Date.now(),\n            completed: false\n        }\n\n        setTodos(prev => [newTodo, ...prev])\n    }\n\n    const toggleHandler = (id: number) => {\n        setTodos(prev =>\n            prev.map(todo => {\n                if (todo.id === id) {\n                    return {\n                        ...todo,\n                        completed: !todo.completed\n                    }\n                }\n                return todo\n            }))\n    }\n\n    const removeHandler = (id: number) => {\n        const shoudRemove = window.confirm('Вы уверены, что хотите удалить элемент')\n        if (shoudRemove) {\n            setTodos(prev => prev.filter(todo => todo.id !== id))\n        }\n    }\n    return (\n        <React.Fragment>\n            <TodoForm onAdd={addHandler} />\n            <TodoList\n                todos={todos}\n                onToggle={toggleHandler}\n                onRemove={removeHandler}\n            />\n        </React.Fragment>\n    )\n}","import React from 'react'\n\nexport const AboutPage: React.FC = () => {\n    return (\n        <>\n            <h1>Todo List App</h1>\n            <p>Версия 1.12</p>\n        </>\n    )\n}","import React from 'react';\nimport { Navbar } from './components/Navbar';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { TodosPage } from './pages/TodosPage';\nimport { AboutPage } from './pages/AboutPage';\n\nconst App: React.FC = () => {\n  return <BrowserRouter>\n          <Navbar />\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/todotypescript\" component={TodosPage} exact />\n              <Route path=\"/about\" component={AboutPage} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}